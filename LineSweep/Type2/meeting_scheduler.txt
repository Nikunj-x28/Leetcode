Given the availability time slots arrays slots1 and slots2 of two people and a meeting duration duration,
return the earliest time slot that works for both of them and is of duration duration.

If there is no common time slot that satisfies the requirements, return an empty array.

The format of a time slot is an array of two elements [start, end] representing an inclusive time range from
start to end.  
It is guaranteed that no two availability slots of the same person intersect with each other. That is, for
any two time slots [start1, end1] and [start2, end2] of the same person, either start1 > end2 or start2 > end1.

Example 1:

Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8
Output: [60,68]

Example 2:

Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12
Output: []

Solution = 
Some pointers, we have 2 candidate, so if both have started only then only take there latest time, for example
suppose Person is available from [10:00 , 12:00] but person 2 is available from [11:00 , 12:00]
after we sweep the line past [11:00] count would be 2 and then we can take [11:00] as candidate start time as
this time is common to both person.
Next whenever we encounter an end of time AND we have already noted down the common_time , check if we met the
duration ? if yes return , because this earlies, otherwise reset the common_time, as now we have to find
some common start all over again.