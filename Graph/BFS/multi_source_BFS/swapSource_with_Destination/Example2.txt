The example used to showcase this technique is a multisource BFS problem,
but this can be used generally anywhere with BFS.

Suppose you have a typical BFS problem you have to see if you can reach a destination from a source.
If yes you mark that source as valid. But here lies the problem if their are a lot of sources would you do it for each of them ?
Thats way too much time consuming !!

Intead start a DFS from the valid destination and try to reach all possible sources and then mark them.

Now the famous question to illustrate ->

Pacific Atlantic Water Flow

There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean
touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.
The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where
heights[r][c] represents the height above sea level of the cell at coordinate (r, c).

The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south,
east, and west if the neighboring cell's height is less than or equal to the current cell's height.
Water can flow from any cell adjacent to an ocean into the ocean.

Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from
cell (ri, ci) to both the Pacific and Atlantic oceans.

=> What we will do is start a BFS from all Atlantic ocean neighboring cells then mark all cells reachable
   then we will do the same with Pacific ocean . The cells visited twice will be our answer.